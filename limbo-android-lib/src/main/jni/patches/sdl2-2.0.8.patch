diff -ru --no-dereference /tmp/SDL2-2.0.8/Android.mk ./Android.mk
--- /tmp/SDL2-2.0.8/Android.mk	2018-03-01 11:34:41.000000000 -0500
+++ ./Android.mk	2022-03-03 05:05:48.223192739 -0500
@@ -51,6 +51,14 @@
 LOCAL_CFLAGS += -DGL_GLEXT_PROTOTYPES
 LOCAL_LDLIBS := -ldl -lGLESv1_CM -lGLESv2 -llog -landroid
 
+# LIMBO:
+LOCAL_CFLAGS += -D__LIMBO__
+ifeq ($(USE_AAUDIO),true)
+  LOCAL_CFLAGS += -D__ENABLE_AAUDIO__
+endif
+LOCAL_LDLIBS += -llog
+#LIMBO
+
 cmd-strip := 
 
 include $(BUILD_SHARED_LIBRARY)
diff -ru --no-dereference /tmp/SDL2-2.0.8/src/core/android/SDL_android.c ./src/core/android/SDL_android.c
--- /tmp/SDL2-2.0.8/src/core/android/SDL_android.c	2018-03-01 11:34:42.000000000 -0500
+++ ./src/core/android/SDL_android.c	2022-03-02 17:18:20.593569237 -0500
@@ -1001,8 +1001,86 @@
 static jboolean captureBuffer16Bit = JNI_FALSE;
 static jobject captureBuffer = NULL;
 
+#if defined(__LIMBO__) && defined(__ENABLE_AAUDIO__)
+#include <dlfcn.h>
+int enableAaudio = 0;
+typedef void (*createAAudioDevice_t)(int, int, int);
+createAAudioDevice_t createAAudioDevice = NULL;
+typedef void (*destroyAaudioDevice_t)(void);
+destroyAaudioDevice_t destroyAaudioDevice = NULL;
+typedef int (*writeAaudio_t)(void);
+writeAaudio_t writeAaudio = NULL;
+typedef void* (*getAaudioBuffer_t)(void);
+getAaudioBuffer_t getAaudioBuffer = NULL;
+void *ldhandle = NULL;
+const char *aaudioLib = NULL;
+const char *aaudioLibPath = NULL;
+const char *dlsym_error = NULL;
+
+void* loadLib() {
+    dlerror();
+    void* handle = dlopen(aaudioLib, RTLD_LAZY);
+    if(handle == NULL) {
+        printf("trying loading with full path: %s\n", aaudioLibPath);
+        handle = dlopen(aaudioLibPath, RTLD_LAZY);
+    }
+    dlsym_error = dlerror();
+    if (dlsym_error) {
+            printf("Cannot load library %s: %s\n", aaudioLib, dlsym_error);
+            return NULL;
+    }
+    return handle;
+}
+
+void* loadSymbol(const char *sym) {
+        dlerror();
+        void *sym_func = dlsym(ldhandle, sym);
+        dlsym_error = dlerror();
+        if (dlsym_error) {
+            LOGE("Cannot load symbol %s: %s\n", sym, dlsym_error);
+            return NULL;
+        }
+        return sym_func;
+}
+
+void loadSymbols() {
+    createAAudioDevice = (createAAudioDevice_t) loadSymbol("createAAudioDevice");
+    destroyAaudioDevice = (destroyAaudioDevice_t) loadSymbol("destroyAaudioDevice");
+    writeAaudio = (writeAaudio_t) loadSymbol("writeAaudio");
+    getAaudioBuffer = (getAaudioBuffer_t) loadSymbol("getAaudioBuffer");
+}
+
+JNIEXPORT void JNICALL Java_com_max2idea_android_limbo_jni_VMExecutor_nativeEnableAaudio(
+        JNIEnv* env, jobject thiz, 
+        int value, jstring aaudioLibName, jstring aaudioLibFullpath) {
+    printf("set enable aaudio: %d\n", value);
+    if (aaudioLibName != NULL)
+        aaudioLib = (*env)->GetStringUTFChars(env, aaudioLibName, 0);
+
+    if (aaudioLibFullpath != NULL)
+        aaudioLibPath = (*env)->GetStringUTFChars(env, aaudioLibFullpath, 0);
+    
+    enableAaudio = value;
+}
+
+#endif // LIMBO
+
 int Android_JNI_OpenAudioDevice(int iscapture, int sampleRate, int is16Bit, int channelCount, int desiredBufferFrames)
 {
+#if defined(__LIMBO__) && defined(__ENABLE_AAUDIO__)
+	if(enableAaudio) {
+        ldhandle = loadLib();
+        if(ldhandle != NULL) {
+            loadSymbols();
+            if(createAAudioDevice != NULL) {
+                createAAudioDevice(sampleRate, channelCount, desiredBufferFrames);
+                return desiredBufferFrames;
+            }
+        }
+        enableAaudio = 0;
+        printf("Aaudio could not be loaded%d\n");
+	}
+#endif
     jboolean audioBufferStereo;
     int audioBufferFrames;
     jobject jbufobj = NULL;
@@ -1119,11 +1197,28 @@
 
 void * Android_JNI_GetAudioBuffer(void)
 {
+#if defined(__LIMBO__) && defined(__ENABLE_AAUDIO__)
+    if(enableAaudio && getAaudioBuffer != NULL)
+        return getAaudioBuffer();
+#endif
     return audioBufferPinned;
 }
 
 void Android_JNI_WriteAudioBuffer(void)
 {
+#if defined(__LIMBO__) && defined(__ENABLE_AAUDIO__)
+    if(enableAaudio && writeAaudio != NULL) {
+        writeAaudio();
+        return;
+    }
+#endif
+
+#ifdef __LIMBO__
+    if(audioBufferPinned == NULL) {
+        printf("buffer not ready!\n");
+        return;
+    }
+#endif
     JNIEnv *mAudioEnv = Android_JNI_GetEnv();
 
     if (audioBuffer16Bit) {
@@ -1203,6 +1298,10 @@
             audioBufferPinned = NULL;
         }
     }
+#if defined(__LIMBO__) && defined(__ENABLE_AAUDIO__)
+    if(enableAaudio && destroyAaudioDevice!=NULL)
+        destroyAaudioDevice();
+#endif
 }
 
 /* Test for an exception and call SDL_SetError with its detail if one occurs */
diff -ru --no-dereference /tmp/SDL2-2.0.8/src/events/SDL_mouse.c ./src/events/SDL_mouse.c
--- /tmp/SDL2-2.0.8/src/events/SDL_mouse.c	2018-03-01 11:34:42.000000000 -0500
+++ ./src/events/SDL_mouse.c	2022-03-02 17:18:20.597569238 -0500
@@ -655,6 +655,10 @@
 void
 SDL_WarpMouseInWindow(SDL_Window * window, int x, int y)
 {
+#ifdef __LIMBO__
+    // LIMBO: we don't warp in limbo
+    return;
+#endif
     SDL_Mouse *mouse = SDL_GetMouse();
 
     if (window == NULL) {
@@ -675,6 +679,11 @@
 int
 SDL_WarpMouseGlobal(int x, int y)
 {
+#ifdef __LIMBO__
+    // LIMBO: we don't warp in limbo
+    printf("mouse global\n");
+    return 0;
+#endif
     SDL_Mouse *mouse = SDL_GetMouse();
 
     if (mouse->WarpMouseGlobal) {
